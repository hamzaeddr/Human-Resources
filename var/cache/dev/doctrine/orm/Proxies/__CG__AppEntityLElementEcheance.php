<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class LElementEcheance extends \App\Entity\LElementEcheance implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'id', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'contract', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'periode', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'rubrique', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'dateEcheance', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'created', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'sens', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'montant', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'active', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'valider', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'bulletin', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'problemes'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'id', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'contract', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'periode', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'rubrique', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'dateEcheance', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'created', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'sens', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'montant', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'active', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'valider', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'bulletin', '' . "\0" . 'App\\Entity\\LElementEcheance' . "\0" . 'problemes'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (LElementEcheance $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getContract(): ?\App\Entity\LContract
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContract', []);

        return parent::getContract();
    }

    /**
     * {@inheritDoc}
     */
    public function setContract(?\App\Entity\LContract $contract): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContract', [$contract]);

        return parent::setContract($contract);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeriode(): ?\App\Entity\Periode
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriode', []);

        return parent::getPeriode();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeriode(?\App\Entity\Periode $periode): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeriode', [$periode]);

        return parent::setPeriode($periode);
    }

    /**
     * {@inheritDoc}
     */
    public function getRubrique(): ?\App\Entity\Prubrique
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRubrique', []);

        return parent::getRubrique();
    }

    /**
     * {@inheritDoc}
     */
    public function setRubrique(?\App\Entity\Prubrique $rubrique): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRubrique', [$rubrique]);

        return parent::setRubrique($rubrique);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateEcheance(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateEcheance', []);

        return parent::getDateEcheance();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateEcheance(?\DateTimeInterface $dateEcheance): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateEcheance', [$dateEcheance]);

        return parent::setDateEcheance($dateEcheance);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated(?\DateTimeInterface $created): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getSens(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSens', []);

        return parent::getSens();
    }

    /**
     * {@inheritDoc}
     */
    public function setSens(?float $sens): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSens', [$sens]);

        return parent::setSens($sens);
    }

    /**
     * {@inheritDoc}
     */
    public function getMontant(): ?float
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMontant', []);

        return parent::getMontant();
    }

    /**
     * {@inheritDoc}
     */
    public function setMontant(?float $montant): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMontant', [$montant]);

        return parent::setMontant($montant);
    }

    /**
     * {@inheritDoc}
     */
    public function isActive(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive(?bool $active): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function isValider(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isValider', []);

        return parent::isValider();
    }

    /**
     * {@inheritDoc}
     */
    public function setValider(?bool $valider): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValider', [$valider]);

        return parent::setValider($valider);
    }

    /**
     * {@inheritDoc}
     */
    public function getBulletin(): ?\App\Entity\Tbulletin
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBulletin', []);

        return parent::getBulletin();
    }

    /**
     * {@inheritDoc}
     */
    public function setBulletin(?\App\Entity\Tbulletin $bulletin): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBulletin', [$bulletin]);

        return parent::setBulletin($bulletin);
    }

    /**
     * {@inheritDoc}
     */
    public function getProblemes(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProblemes', []);

        return parent::getProblemes();
    }

    /**
     * {@inheritDoc}
     */
    public function addProbleme(\App\Entity\Probleme $probleme): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProbleme', [$probleme]);

        return parent::addProbleme($probleme);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProbleme(\App\Entity\Probleme $probleme): \App\Entity\LElementEcheance
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProbleme', [$probleme]);

        return parent::removeProbleme($probleme);
    }

}
